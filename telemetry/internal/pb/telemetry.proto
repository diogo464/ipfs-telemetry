syntax = "proto3";
package telemetry;

import "opentelemetry/proto/common/v1/common.proto";

option go_package = "internal/pb";

service Telemetry {
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);

  rpc GetProperties(GetPropertiesRequest) returns (stream Property);

  rpc GetMetrics(GetMetricsRequest) returns (stream StreamSegment);

  rpc GetEventDescriptors(GetEventDescriptorsRequest) returns (stream EventDescriptor);

  rpc GetEvents(GetEventsRequest) returns (stream StreamSegment);
}
message GetSessionRequest {}

message GetSessionResponse {
  // The random UUID of this session
  string uuid = 1;
}

message GetPropertiesRequest {}

message Property {
  opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
  string name = 2;
  string description = 3;
  oneof value {
    int64 integer_value = 4;
    string string_value = 5;
  }
}

message GetMetricsRequest {
  uint32 sequence_number_since = 1;
}

message GetEventDescriptorsRequest {}

message EventDescriptor {
  uint32 event_id = 1;
  opentelemetry.proto.common.v1.InstrumentationScope scope = 2;
  string name = 3;
  string description = 4;
}

message GetEventsRequest {
  uint32 event_id = 1;

  // the sequence number of the first segment that should be returned.
  uint32 sequence_number_since = 2;
}

message GetStreamRequest {
  uint32 stream_id = 1;
  // The sequence number of the first segment that should be returned.
  uint32 sequence_number_since = 2;
}

message StreamSegment {
  uint32 sequence_number = 1;
  bytes data = 2;
}
