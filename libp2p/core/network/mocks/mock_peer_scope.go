// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/libp2p/go-libp2p/core/network (interfaces: PeerScope)
//
// Generated by this command:
//
//	mockgen -package mocknetwork -destination mock_peer_scope.go github.com/libp2p/go-libp2p/core/network PeerScope
//

// Package mocknetwork is a generated GoMock package.
package mocknetwork

import (
	reflect "reflect"

	network "github.com/libp2p/go-libp2p/core/network"
	peer "github.com/libp2p/go-libp2p/core/peer"
	gomock "go.uber.org/mock/gomock"
)

// MockPeerScope is a mock of PeerScope interface.
type MockPeerScope struct {
	ctrl     *gomock.Controller
	recorder *MockPeerScopeMockRecorder
	isgomock struct{}
}

// MockPeerScopeMockRecorder is the mock recorder for MockPeerScope.
type MockPeerScopeMockRecorder struct {
	mock *MockPeerScope
}

// NewMockPeerScope creates a new mock instance.
func NewMockPeerScope(ctrl *gomock.Controller) *MockPeerScope {
	mock := &MockPeerScope{ctrl: ctrl}
	mock.recorder = &MockPeerScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerScope) EXPECT() *MockPeerScopeMockRecorder {
	return m.recorder
}

// BeginSpan mocks base method.
func (m *MockPeerScope) BeginSpan() (network.ResourceScopeSpan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginSpan")
	ret0, _ := ret[0].(network.ResourceScopeSpan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginSpan indicates an expected call of BeginSpan.
func (mr *MockPeerScopeMockRecorder) BeginSpan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginSpan", reflect.TypeOf((*MockPeerScope)(nil).BeginSpan))
}

// Peer mocks base method.
func (m *MockPeerScope) Peer() peer.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peer")
	ret0, _ := ret[0].(peer.ID)
	return ret0
}

// Peer indicates an expected call of Peer.
func (mr *MockPeerScopeMockRecorder) Peer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peer", reflect.TypeOf((*MockPeerScope)(nil).Peer))
}

// ReleaseMemory mocks base method.
func (m *MockPeerScope) ReleaseMemory(size int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseMemory", size)
}

// ReleaseMemory indicates an expected call of ReleaseMemory.
func (mr *MockPeerScopeMockRecorder) ReleaseMemory(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseMemory", reflect.TypeOf((*MockPeerScope)(nil).ReleaseMemory), size)
}

// ReserveMemory mocks base method.
func (m *MockPeerScope) ReserveMemory(size int, prio uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveMemory", size, prio)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveMemory indicates an expected call of ReserveMemory.
func (mr *MockPeerScopeMockRecorder) ReserveMemory(size, prio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveMemory", reflect.TypeOf((*MockPeerScope)(nil).ReserveMemory), size, prio)
}

// Stat mocks base method.
func (m *MockPeerScope) Stat() network.ScopeStat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(network.ScopeStat)
	return ret0
}

// Stat indicates an expected call of Stat.
func (mr *MockPeerScopeMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockPeerScope)(nil).Stat))
}
