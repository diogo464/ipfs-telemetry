#!/usr/bin/python
from __future__ import annotations

import subprocess
import json
import argparse
from typing import Union

TAG_PREFIX = "localhost:5000/"
TAG_POSTFIX = ":latest"


class DockerImageTemplate:
    def __init__(
        self,
        name: str,
        path: str,
        resource: Union[str, list[str], None],
        root: str = ".",
    ):
        self.name = name
        self.path = path
        self.resource = resource
        self.root = root

    def build(self, tag_prefix: str, tag_postfix: str) -> DockerImage:
        if tag_prefix.endswith("/"):
            tag_prefix = tag_prefix[:-1]
        if tag_postfix.startswith(":"):
            tag_postfix = tag_postfix[1:]
        tag = f"{tag_prefix}/{self.name}:{tag_postfix}"
        return DockerImage(self.name, tag, self.path, self.resource, self.root)


TEMPLATES = [
    DockerImageTemplate(
        "ipfs-bot",
        "ipfs-bot/Dockerfile",
        "deploy/ipfs-bot",
        root="ipfs-bot/",
    ),
    DockerImageTemplate(
        "crawler",
        "crawler/Dockerfile",
        None,
        root="crawler/",
    ),
    DockerImageTemplate(
        "monitor",
        "monitor/Dockerfile",
        "deploy/monitor",
        root="monitor/",
    )
    # DockerImageTemplate(
    #     "monitor",
    #     "images/monitor.dockerfile",
    #     "deployment/ipfs-telemetry-monitor",
    # ),
    # DockerImageTemplate(
    #     "crawler",
    #     "images/crawler.dockerfile",
    #     "deployment/ipfs-telemetry-crawler",
    # ),
    # DockerImageTemplate(
    #     "ipfs-bot",
    #     "images/ipfs-bot.dockerfile",
    #     "deployment/ipfs-telemetry-ipfs-bot",
    # ),
    # DockerImageTemplate(
    #     "backend",
    #     "images/backend.dockerfile",
    #     [
    #         "deployment/ipfs-telemetry-exporter-s3",
    #         "deployment/ipfs-telemetry-exporter-s3-pg",
    #         "deployment/ipfs-telemetry-webapi",
    #         "deployment/ipfs-telemetry-toolbox",
    #     ],
    # ),
    # DockerImageTemplate(
    #     "docs",
    #     "docs/Dockerfile",
    #     "deployment/ipfs-telemetry-docs",
    #     root="docs",
    # ),
]


class DockerImage:
    def __init__(
        self,
        name: str,
        tag: str,
        path: str,
        resource: Union[str, list[str], None],
        root: str = ".",
    ):
        self.name = name
        self.tag = tag
        self.path = path
        self.root = root
        self._resource = resource

    def build(self):
        subprocess.run(["podman", "build", "-t", self.tag, "-f", self.path, self.root])

    def push(self):
        subprocess.run(["podman", "push", "--tls-verify=false", self.tag])

    def get_digest(self):
        inspect = subprocess.run(
            ["podman", "inspect", self.tag], capture_output=True, text=True
        )
        if inspect.returncode != 0:
            return None
        return json.loads(inspect.stdout)[0]["Digest"]

    @property
    def resources(self) -> list[str]:
        if self._resource is None:
            return []
        if isinstance(self._resource, str):
            return [self._resource]
        return self._resource


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--tag-prefix", default=TAG_PREFIX)
    parser.add_argument("--tag-postfix", default=TAG_POSTFIX)
    parser.add_argument("--no-restart", action="store_true")
    parser.add_argument("--no-push", action="store_true")
    parser.add_argument("images", nargs="*")
    args = parser.parse_args()

    images = [
        template.build(args.tag_prefix, args.tag_postfix) for template in TEMPLATES
    ]

    resource_restarts = []
    for image in images:
        if len(args.images) > 0 and image.name not in args.images:
            continue

        old_digest = image.get_digest()
        image.build()
        new_digest = image.get_digest()

        if not args.no_push:
            image.push()

        if old_digest != new_digest and not args.no_restart:
            print(f"New image detected, restarting {image.resources} resource")
            resource_restarts.extend(image.resources)

    for resource in resource_restarts:
        print(f"Restarting {resource} resource")
        subprocess.run(["kubectl", "rollout", "restart", resource]).check_returncode()


if __name__ == "__main__":
    main()
