syntax = "proto3";
package telemetry;

option go_package = "internal/pb";

service Telemetry {
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);

  rpc GetMetricDescriptors(GetMetricDescriptorsRequest)
      returns (stream MetricDescriptor);

  // The data in the segment is a ResourceMetrics defined in:
  // https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/metrics/v1/metrics.proto
  rpc GetMetrics(GetMetricsRequest) returns (stream StreamSegment);

  rpc GetPropertyDescriptors(GetPropertyDescriptorsRequest) returns (stream PropertyDescriptor);

  rpc GetProperties(GetPropertiesRequest) returns (stream Property);

  rpc GetCaptureDescriptors(GetCaptureDescriptorsRequest)
      returns (stream CaptureDescriptor);

  // The data in the segment is JSON.
  rpc GetCapture(GetCaptureRequest) returns (stream StreamSegment);

  rpc GetEventDescriptors(GetEventDescriptorsRequest)
      returns (stream EventDescriptor);

  // The data in the segment is JSON.
  rpc GetEvent(GetEventRequest) returns (stream StreamSegment);
}

message GetSessionRequest {}
message GetSessionResponse {
  // The random UUID of this session
  string uuid = 1;
}

message StreamSegment {
  uint32 sequence_number = 1;
  bytes data = 2;
}

message GetMetricDescriptorsRequest {}
message MetricDescriptor {
  string scope = 1;
  string name = 2;
  string description = 3;
}

message GetMetricsRequest {
  // The sequence number of the first segment that should be returned.
  uint32 sequence_number_since = 1;
}

message GetPropertyDescriptorsRequest {}
message PropertyDescriptor {
  uint32 id = 1;
  string scope = 2;
  string name = 3;
  string description = 4;
}

message GetPropertiesRequest {}
message Property {
  uint32 id = 1;
  string scope = 2;
  string name = 3;
  string description = 4;
  oneof value {
    int64 integer_value = 5;
    string string_value = 6;
  }
}

message GetCaptureDescriptorsRequest {}
message CaptureDescriptor {
  uint32 id = 1;
  string scope = 2;
  string name = 3;
  string description = 4;
}

message GetCaptureRequest {
  // The sequence number of the first segment that should be returned.
  uint32 sequence_number_since = 1;
  uint32 id = 2;
}

message GetEventDescriptorsRequest {}
message EventDescriptor {
  uint32 id = 1;
  string scope = 2;
  string name = 3;
  string description = 4;
}

message GetEventRequest {
  uint32 sequence_number_since = 1;
  uint32 id = 2;
}
