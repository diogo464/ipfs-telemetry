// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: crawler/pb/crawler.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlerClient interface {
	// Stream all the peers known to support the telemetry protocol including
	// the ones already known before this rpc
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Crawler_SubscribeClient, error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Crawler_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Crawler_ServiceDesc.Streams[0], "/Crawler/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &crawlerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Crawler_SubscribeClient interface {
	Recv() (*SubscribeItem, error)
	grpc.ClientStream
}

type crawlerSubscribeClient struct {
	grpc.ClientStream
}

func (x *crawlerSubscribeClient) Recv() (*SubscribeItem, error) {
	m := new(SubscribeItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrawlerServer is the server API for Crawler service.
// All implementations must embed UnimplementedCrawlerServer
// for forward compatibility
type CrawlerServer interface {
	// Stream all the peers known to support the telemetry protocol including
	// the ones already known before this rpc
	Subscribe(*SubscribeRequest, Crawler_SubscribeServer) error
	mustEmbedUnimplementedCrawlerServer()
}

// UnimplementedCrawlerServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (UnimplementedCrawlerServer) Subscribe(*SubscribeRequest, Crawler_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCrawlerServer) mustEmbedUnimplementedCrawlerServer() {}

// UnsafeCrawlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlerServer will
// result in compilation errors.
type UnsafeCrawlerServer interface {
	mustEmbedUnimplementedCrawlerServer()
}

func RegisterCrawlerServer(s grpc.ServiceRegistrar, srv CrawlerServer) {
	s.RegisterService(&Crawler_ServiceDesc, srv)
}

func _Crawler_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrawlerServer).Subscribe(m, &crawlerSubscribeServer{stream})
}

type Crawler_SubscribeServer interface {
	Send(*SubscribeItem) error
	grpc.ServerStream
}

type crawlerSubscribeServer struct {
	grpc.ServerStream
}

func (x *crawlerSubscribeServer) Send(m *SubscribeItem) error {
	return x.ServerStream.SendMsg(m)
}

// Crawler_ServiceDesc is the grpc.ServiceDesc for Crawler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crawler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Crawler_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crawler/pb/crawler.proto",
}
