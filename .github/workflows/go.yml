name: Go

on:
  push:
    branches:
      - main

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    steps:
    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true # default: false
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: latest
        release_name: latest
        body: IPFS Telemetry
        draft: false
        prerelease: false

  build-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Docker Login
      uses: docker/login-action@v1.14.1
      with:
        registry: ghcr.io
        username: diogo464
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Install protoc
      run: sudo apt install golang-goprotobuf-dev
    
    - name: Make setup
      run: make setup

    - name: Build binaries
      run: CGO_ENABLED=0 make build

    - name: Build and push container
      uses: docker/build-push-action@v2.10.0
      with:
        context: .
        file: deploy/telemetry/Dockerfile
        push: true
        tags: ghcr.io/diogo464/telemetry:latest
 
  build-dist:
    runs-on: ubuntu-latest
    needs: [create-release]
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
    - name: Docker Login
      uses: docker/login-action@v1.14.1
      with:
        registry: ghcr.io
        username: diogo464
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Install protoc
      run: sudo apt install golang-goprotobuf-dev
    
    - name: Make tools
      run: make tools

    - name: Make proto
      run: make proto

    - name: Build
      run: CGO_ENABLED=0 GOOS="${{ matrix.os }}" GOARCH="${{ matrix.arch }}" make ipfs
      
    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./bin/ipfs
        asset_name: "ipfs_${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}"
        asset_content_type: application/octet-stream

    - name: Build and push container
      uses: docker/build-push-action@v2.10.0
      if: ${{ matrix.os }} == "linux"
      with:
        context: .
        platforms: "linux/${{ matrix.arch }}"
        file: deploy/ipfs/Dockerfile
        push: true
        tags: ghcr.io/diogo464/ipfs:latest

