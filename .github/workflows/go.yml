name: Go

on:
  push:
    branches:
      - main

jobs:
  build-proto:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Setup protoc
      run: sudo apt install golang-goprotobuf-dev
    
    - name: Build tools
      run: make tools

    - name: Build proto
      run: make proto
      
    - name: Upload proto files
      uses: actions/upload-artifact@v3.0.0
      with:
        name: proto-files
        path: pkg/proto
    
  build-linux:
    runs-on: ubuntu-latest
    needs: [build-proto]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Download proto files
      uses: actions/download-artifact@v3.0.0
      with:
        name: proto-files
        path: pkg/proto

    - name: Docker Login
      uses: docker/login-action@v1.14.1
      with:
        registry: ghcr.io
        username: diogo464
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build binaries
      run: CGO_ENABLED=0 make build

    - name: Build distribution binaries
      run: CGO_ENABLED=0 make dist
      
    - name: Upload ipfs binaries
      uses: actions/upload-artifact@v3.0.0
      with:
        name: ipfs-binaries
        path: dist/

    - name: Build and push container
      uses: docker/build-push-action@v2.10.0
      with:
        context: .
        file: deploy/telemetry/Dockerfile
        push: true
        tags: ghcr.io/diogo464/telemetry:latest

  release:
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
    - name: Download ipfs binaries
      uses: actions/download-artifact@v3.0.0
      with:
        name: ipfs-binaries
        path: dist/

    - uses: dev-drprasad/delete-tag-and-release@v0.2.0
      with:
        delete_release: true # default: false
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: latest
        release_name: latest
        body: IPFS Telemetry
        draft: false
        prerelease: false

    - name: Upload windows amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/ipfs_windows-amd64.exe
        asset_name: ipfs_windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload linux amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/ipfs_linux-amd64
        asset_name: ipfs_linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload linux arm64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/ipfs_linux-arm64
        asset_name: ipfs_linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload darwin amd64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist/ipfs_darwin-amd64
        asset_name: ipfs_darwin-amd64
        asset_content_type: application/octet-stream
